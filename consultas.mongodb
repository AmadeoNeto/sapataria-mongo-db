// FIND:
// vendedores cujo salario está entre 1000 e 1500 (inclusos)
db.vendedor.find( {
    $and: [
        { "salario": { $gte: 1000}},
        { "salario": { $lte: 1500}}
    ]
});

// tipos de calçados disponíveis de menos de 350 reais
db.calcados.find( {
    "quantidadeEstoque": { $gte: 0 },
    "preco": { $lte: 350 }
});
// SIZE: retorna as vendas em que foram vendidos exatamente 3 produtos diferentes
db.venda.find({produtosVendidos: {$size: 3}}).pretty();

// AGGREGATE, GROUP, SUM e SORT: 
//   Retorna o total de vendas de cada vendedor em ordem decrescente dos valores totais
/*  AGGREGATE -> Calculates aggregate values for the data in a collection or a view.
 *  GROUP -> Groups input documents by the specified _id expression and for each 
 *      distinct grouping, outputs a document.
 *  SUM -> Calculates and returns the sum of numeric values. $sum ignores non-numeric values.
 *  SORT -> The $sort modifier orders the elements of an array.
 */
db.venda.aggregate([
    {
        $group: {
            _id: "$cpfVendedor",
            valor_total: {
                $sum: "$valorCompra"
            }   
        }
    },
    {
        $sort : {
            valor_total: -1 
        } 
    }
]);

//MATCH, COUNT:
// Match: Filters the documents to pass only the documents that match the specified condition(s) to the next pipeline stage.
// Count: Returns the count of documents that would match a find() query for the collection or view
//Quantidade de calçados de tamanho 40 disponíveis na sapataria
db.calcados.aggregate([{
    $match:{tamanho:"40"}},
    {$count:"Qt calçados tamanho 40"}]);

// PROJECT e COND
// Retorna os calçados com um novo campo para indicar se eles servem para o outfit ou não
// Passes along the documents with the requested fields to the next stage in the pipeline. The $project takes a document that can specify the inclusion of fields, the suppression of the _id field, the addition of new fields, and the resetting of the values of existing fields.
// 1 -> incluir ; 0 -> não incluir
db.calcados.aggregate([
    {
        $project: {
            tipo: 1,
            marca: 1,
            modelo: 1,
            tamanho: 1,
            preco: 1,
            paraOutfit: {
                $cond: {
                    if: { $gte: ["$preco", 700]},
                    then: "Outfit",
                    else: "Não serve"
                }
            }
        }
    }
]);

//MAX, GROUP
//MAX: Returns the maximum value.
//GROUP: Groups input documents by the specified _id expression and for each distinct grouping, outputs a document
//Retorna o valor da maior venda de cada vendedor
db.venda.aggregate([
    {$group:{
        _id:"$cpfVendedor",
         maiorVenda: {$max:"$valorCompra"}}},
    {
        $sort:{
            _id: 1
        }
    }
]);


// EXISTS E UPDATE MANY
// Apagando o campo cpfCliente da collection venda para permitir usar o $exists: false para retornar os documentos que não possuem o cpf do cliente
// EXISTS: When <boolean> is true, $exists matches the documents that contain the field, including documents where the field value is null. If <boolean> is false, the query returns only the documents that do not contain the field
// UNSET: The $unset operator deletes a particular field
// UPDATE MANY: updateMany() updates all matching documents in the collection that match the filter, using the update criteria to apply modifications.
db.venda.updateMany({cpfCliente: null}, {$unset: {cpfCliente: null}});
db.venda.find({cpfCliente: {$exists: false}}).pretty();

//// FILTER, AVG
// Retorna o código e a quantidade de produtos vendidos nas quais algum item foi vendido 
// mais do que a média de itens vendidos
    db.venda.aggregate([
        {
        $project: {
                _id:0,
                produtosVendidos:{
                    $filter:{
                        input:"$produtosVendidos",
                        as: "item",
                        cond:{$gt:["$$item.quantidadeVendida",{$avg:"$produtosVendidos.quantidadeVendida"}]}
                    }
                }
            }
        },
        {
        $match: {
            "produtosVendidos.0": {$exists:true}
        }
        }
    ]);

// $WHERE AND FUNCTION
// Listar as vendas que o James Bond fez
// WHERE: Use the $where operator to pass either a string containing a JavaScript expression or a full JavaScript function to the query system. The $where provides greater flexibility, but requires that the database processes the JavaScript expression or function for each document in the collection
// FUNCTION: Defines a custom aggregation function or expression in JavaScript
db.venda.find({$where: function() {
    return (this.cpfVendedor == 007)
}});

// LIMIT
// Listar os 5 calçados que estão com a menor quantidade em estoque
// LIMIT: Limits the number of documents passed to the next stage in the pipeline.
db.calcados.aggregate([
    {
        $project: {
            _id: 0,
            codigo: 1,
            marca: 1,
            modelo: 1,
            quantidadeEstoque: 1
        }
    },
    {$sort:{quantidadeEstoque:1}}, 
    {$limit:5}
]);

//SET
//The $set operator replaces the value of a field with the specified value.
//Atualiza o salário dos trabalhadores para serem todos ao menos um salário mínimo
db.vendedor.updateMany(
    {"salario":{$lt: 1212.00}},
    {$set: {"salario":1212.00}}
);

//Índice necessário para se usar o operador $text
db.calcados.createIndex({modelo:"text"});

//TEXT e SEARCH
//$text performs a text search on the content of the fields indexed with a text index
//Retorna modelo, tipo, tamanho e preço dos calçados infantis da loja
db.calcados.find(
    {$text:{ $search: "infantil"}},
    {_id:0, modelo:1, tipo:1, tamanho:1, preco:1},
);

//LOOKUP
//Performs a left outer join
//Informações sobre o vendedor e o valor total que ele já vendeu na loja
db.vendedor.aggregate([
    {
        $lookup: {
          from: 'venda',
          localField: 'cpf',
          foreignField: 'cpfVendedor',
          as: 'vendas'
        }
    },
    {
        $project: {
            _id:0,
            cpf: 1,
            nome:1,
            totalVendido: {$trunc: [{$sum:"$vendas.valorCompra"},2]}
        }  
    }
]);

//NumeroDeVendasNoMes: atributo derivado
//Informações sobre o vendedor e o valor total que ele vendeu na loja no mês atual
db.vendedor.aggregate([
    {
        $lookup: {
          from: 'venda',
          localField: 'cpf',
          foreignField: 'cpfVendedor',
          as: 'vendas'
        }
    },
    {
        $project:{
            _id:0,
            cpf: 1,
            nome:1,
            vendasMes:{
                $filter:{
                    input:"$vendas",
                    as: "venda",
                    cond:{$and:[
                        {$eq:[{$year:"$$venda.dataHoraVenda"}, {$year:new Date()}]},
                        {$eq:[{$month:"$$venda.dataHoraVenda"},{$month:new Date()}]}
                    ]}
                }
            }
        } 
    },
    {
        $project: {
            _id:0,
            cpf: 1,
            nome:1,
            numeroDeVendasNoMes: {$trunc: [{$sum:"$vendasMes.valorCompra"},2]}
        }  
    }
]);


/* 
   SAVE NÃO É MAIS UTILIZADO NO MONGODB
   MAS, SEGUE O CÓDIGO DE COMO ELE SERIA.
*/

// -- Save -> insere/cria um documento de acordo com os atributos do documento.
/* db.venda.save(
    {
        produtosVendidos: [
            {codigo: "tenmiin22", quantidadeVendida: 1},
            {codigo: "bottigo38", quantidadeVendida: 3}
        ],
        cpfCliente: "001",
        cpfVendedor: "007",
        valorCompra: 1367.90,
        dataHoraVenda: new Date(Date.now())
    }
) */



/* 
    Save está deprecated
    Um dos equivalentes à uma das funções do save é o updateOne
    
    Então usei:
        -UPDATEONE -> Atualiza somente o primeiro documento em uma dada coleção que cumpre a condição dos filtros
        -FINDONE -> Retorna somente o primeiro documento em uma dada coleção que cumpre a condição dos filtros
        -ALL -> É um operador que seleciona somente os documentos no qual o valor do field é uma array e
                ela contem todos os elementos da array especificada no $all
        -ADDTOSET -> É um operador que serve para adicionar valores a uma array
        -ADD -> Realiza a soma de dois numeros, ou duas datas, ou data e numero
        
        Explicados anteriormente: 
            --AGGREGATE -> Calculates aggregate values for the data in a collection or a view.
            --MATCH -> Filters the documents to pass only the documents that match the specified condition(s) to the next pipeline stage.
            --SET ->The $set operator replaces the value of a field with the specified value.
 */

// Descrição da consulta:
//    Atualiza uma venda feita, adicionando mais um calçado ao carrinho, além de atualizar o valor da compra
db.venda.updateOne(
    {_id:db.venda.findOne(
        {
            dataHoraVenda: new Date("2021-02-14T14:27:00"), 
            $or: [
                {produtosVendidos:{
                    $all: [[{codigo: "sanhaun39", quantidadeVendida: 1}]]
                }},
                {cpfVendedor: "013"}
            ]
        },
        {_id:1}
    )._id},
    {
        $addToSet: {
                        produtosVendidos: {
                            codigo: "teolae42", quantidadeVendida: 1
                        }
                    },
        $set: {
            valorCompra:
                db.venda.aggregate(
                    [
                        { $match: {
                            dataHoraVenda: new Date("2021-02-14T14:27:00")
                        }},
                        { $project: { 
                            sovai: { $add: [ 
                                db.venda.findOne(
                                            {
                                                dataHoraVenda: new Date("2021-02-14T14:27:00"), 
                                                cpfVendedor: "013"
                                            },
                                            {valorCompra:1}
                                        ).valorCompra,
                                        db.calcados.findOne(
                                            {
                                                'codigo': 'teolae42'
                                            },
                                            {preco:1}
                                        ).preco
                            ] } 
                            } }
                    ]).toArray()[0].sovai
        }
    }
);

/* 
    RENAMECOLLECTION -> É um operador que serve para renomear o nome de uma dada começão

    Descrição Função: 
            O adm michael scott quis mudar o nome da coleção Vendedor para Familia,
            mas percebeu que era uma má ideia e voltou atrás
*/
db.vendedor.renameCollection("familia");
db.familia.renameCollection("vendedor");


/* 
    MAPREDUCE -> É uma função que o mongoDB oferece para o fazer o processamento de dados MapReduction. 
                Ou seja, ela basicamente nos permite condensar um grande volume de dados em resultados agregados "úteis"

    Descrição função:
        A senhorita deide costa gostaria de saber quanto ela investe ao todo
        com os salarios dos funcionários ativos. E perpicaz como sempre foi, ela decide fazer por mapReduce.

        Infelizmente ela não sabe que o mapReduction vai ficar deprecated 
        na versão 5 do mongodb, ou seja o banco de dados dela vai quebrar em algum momento.
    
*/
// definindo funções js de map e de Reduction
var mapThis = function()
{
    emit(this.status, this.salario);
};
var sumThis = function(status, salario)
{
    return Array.sum(salario);
};

// fazendo o map reduce
db.vendedor.mapReduce(
    mapThis, 
    sumThis,
    {out :"somaSalariosAtivos"}
);

// observando a coleção gerada pelo mapReduce
// Resultado da soma de todos os salario dos Funcionários ativos.
db.somaSalariosAtivos.findOne(
    {
        _id:"ativo"
    }
);

//Função de agregação ($function)
//$function: Defines a custom aggregation function or expression in JavaScript.
// Gera uma mensagem com o cliente, o valor da compra e a data da compra formatados para 
// cada venda na loja
db.venda.aggregate([
    {
        $project: {
            _id:0,
            message:{
              $function:{
                body: function(cpfCliente,valorCompra,dataHoraVenda) {
                    let txt = "O cliente de cpf "
                    if (cpfCliente) {
                        txt += cpfCliente
                    } else {
                        txt += "não informado"
                    }
                    let dia = dataHoraVenda.getDate()
                    let mes = dataHoraVenda.getMonth()
                    if(dia < 10){
                        dia = "0" + dia
                    }
                    if(mes < 10){
                        mes = "0" + mes
                    }

                    let data = dia + "/" + mes + "/" + dataHoraVenda.getFullYear() 

                    txt += " comprou R$" + valorCompra +" em produtos no dia " + data
                    return txt
                },
                args: ["$cpfCliente","$valorCompra","$dataHoraVenda"],
                lang: "js"
              }
          }
        }
    }
]);